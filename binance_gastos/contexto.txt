TFG proyecto DAW "Binance"

1. Diagrama de Casos de Uso
A continuación tienes el diagrama de casos de uso, que organiza las principales funcionalidades de la aplicación en interacción con el usuario.

Diagrama de Casos de Uso:
En el diagrama:

Registrar usuario: Permite a los nuevos usuarios registrarse en la plataforma.
Iniciar sesión: Autentica al usuario y lo conecta a su cuenta.
Crear grupo de gastos: El usuario puede iniciar un nuevo grupo (ej., para un evento o viaje).
Agregar/Eliminar participantes: Gestión de los miembros del grupo.
Añadir gasto al grupo: El usuario ingresa un nuevo gasto, con detalles como cantidad, concepto, y quiénes participaron.
Consultar resumen de gastos: Muestra el desglose de gastos y saldos individuales.
Calcular reparto de gastos (optimizado): Calcula el menor número de pagos necesarios para equilibrar las deudas.
Marcar pagos realizados: Permite al usuario marcar los pagos como completados.
2. Algoritmo de Simplificación de Deudas
Para reducir el número de pagos, aplicaremos un algoritmo de "simplificación de deudas". Esto implica calcular el saldo de cada usuario y luego optimizar los pagos para reducir el número de transacciones.

Pasos del Algoritmo
Calcular los saldos individuales:

Para cada miembro del grupo, calcula el saldo: monto total pagado menos el monto que debe.
Almacena estos saldos en la Tabla de Saldos.
Identificar acreedores y deudores:

Ordena a los usuarios en dos listas:
Acreedores (saldos positivos): aquellos a quienes se les debe dinero.
Deudores (saldos negativos): aquellos que deben pagar.
Emparejar deudores con acreedores:

Recorre las listas y empareja los deudores con acreedores, minimizando el número de transacciones:
Toma el primer deudor y el primer acreedor.
Si el monto adeudado es menor o igual al saldo del acreedor, realiza una transacción por el monto debido y ajusta los saldos.
Si el monto adeudado es mayor que el saldo del acreedor, realiza una transacción por el saldo del acreedor y continúa al siguiente acreedor.
Repite el proceso hasta que todos los saldos sean cero o muy próximos a cero (considerando pequeñas diferencias por redondeo).
Registrar las transacciones en la Tabla de Transacciones Simplificadas:

Cada transacción se almacena en esta tabla con los campos ID_Deudor, ID_Acreedor y Cantidad.
Ejemplo del Algoritmo en Acción
Supongamos un grupo con 3 participantes y los siguientes saldos:

Usuario 1 tiene un saldo de -30 (debe 30).
Usuario 2 tiene un saldo de 50 (le deben 50).
Usuario 3 tiene un saldo de -20 (debe 20).
Pasos del algoritmo:

Usuario 1 (deudor de 30) paga a Usuario 2 (acreedor de 50) una cantidad de 30.
Esto reduce el saldo de Usuario 1 a 0 y el saldo de Usuario 2 a 20.
Usuario 3 (deudor de 20) paga a Usuario 2 (acreedor de 20) una cantidad de 20.
Esto reduce el saldo de Usuario 3 a 0 y el saldo de Usuario 2 a 0.
Resultado final:

Se generan dos transacciones mínimas:
Usuario 1 paga a Usuario 2 una cantidad de 30.
Usuario 3 paga a Usuario 2 una cantidad de 20.


Diseño de Arquitectura
Para el diseño de arquitectura de este proyecto, los componentes principales serán:

Frontend (JavaScript):

Usaremos JavaScript para la lógica del cliente, incluyendo AJAX para peticiones al servidor y actualizaciones dinámicas de la interfaz.
Una biblioteca como jQuery podría simplificar las peticiones AJAX, aunque es opcional.
HTML/CSS para la estructura y el estilo de la interfaz de usuario.
Backend (PHP):

PHP se encargará de procesar las solicitudes, manejar la lógica de negocio (gestión de usuarios, grupos, gastos, saldos) y comunicarse con la base de datos.
Será el intermediario entre el cliente y la base de datos.
Base de datos (SQL):

SQL almacenará la información del proyecto, incluyendo usuarios, grupos, gastos, pagos y saldos.
La estructura básica de tablas es la siguiente:
Estructura de las tablas
Usuarios:

Almacena los datos de los usuarios.
Campos: ID, nombre, email, contraseña.

Grupos:
Registra los grupos de gastos (viajes, eventos, etc.).
Campos: ID, nombre del grupo, creador, fecha de creación, Código de invitación (se genera aleatoriamente al crear el grupo).

Participantes:
Lista los usuarios que pertenecen a cada grupo.
Campos: ID, ID de grupo, ID de usuario, ROL (administrador o miembro).
Gastos:

Registra cada gasto dentro de un grupo.
Campos: ID, ID de grupo, ID del usuario que pagó, cantidad, descripción.
Pagos:

Muestra los pagos realizados entre usuarios en cada grupo.
Campos: ID, ID de gasto, ID de usuario deudor, ID de usuario acreedor, estado de pago.
Saldos:

Almacena el saldo de cada usuario en un grupo, para ayudar en la simplificación de deudas.
Campos:
ID: Identificador único de saldo.
ID_Grupo: ID del grupo.
ID_Usuario: ID del usuario en el grupo.
Saldo: Monto positivo si el usuario debe recibir dinero, y monto negativo si debe pagar.

Transacciones Simplificadas:

Esta tabla almacena las transacciones mínimas necesarias para saldar las deudas entre los miembros de un grupo.
Campos:
ID: Identificador único de la transacción simplificada.
ID_Grupo: ID del grupo.
ID_Deudor: ID del usuario que debe realizar el pago.
ID_Acreedor: ID del usuario que recibirá el pago.
Cantidad: Monto a pagar.

base de datos

-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- Servidor: 127.0.0.1
-- Tiempo de generación: 12-11-2024 a las 17:24:16
-- Versión del servidor: 10.4.32-MariaDB
-- Versión de PHP: 8.2.12

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Base de datos: `binance_gastos`
--

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `usuarios`
--

CREATE TABLE `usuarios` (
  `id` int(11) NOT NULL,
  `nombre` varchar(50) NOT NULL,
  `email` varchar(100) NOT NULL,
  `contrasena` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Volcado de datos para la tabla `usuarios`
--

INSERT INTO `usuarios` (`id`, `nombre`, `email`, `contrasena`) VALUES
(1, 'a', 'aaq@g.com', '$2y$10$CJM2CGKkEFMailFdhf2ohexrxkPtHvdpsmyUPQhpOc8myGKD2B1q2'),
(2, 'eaa', 'ea@hotmail.com', '$2y$10$jWbN/9zBEgC1FPb./rlD0.40nyGHkJN5vKtKn2JFNlLr.EYeBA3uO');

--
-- Índices para tablas volcadas
--

--
-- Indices de la tabla `usuarios`
--
ALTER TABLE `usuarios`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `email` (`email`);

--
-- AUTO_INCREMENT de las tablas volcadas
--

--
-- AUTO_INCREMENT de la tabla `usuarios`
--
ALTER TABLE `usuarios`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
